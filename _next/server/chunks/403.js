"use strict";
exports.id = 403;
exports.ids = [403];
exports.modules = {

/***/ 8403:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ API_Init)
/* harmony export */ });
/* harmony import */ var _onflow_fcl__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(6786);
/* harmony import */ var _onflow_fcl__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_onflow_fcl__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _onflow_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2543);
/* harmony import */ var _onflow_types__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_onflow_types__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var cadence_contracts_FCL_cdc__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(8869);
/* harmony import */ var cadence_transactions_init_cdc__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(2390);
/* harmony import */ var src_accountGenerator__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(6053);
/* harmony import */ var src_authz__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(9903);
/* harmony import */ var src_constants__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(4007);
/* harmony import */ var src_crypto__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(1674);
/* harmony import */ var src_fclConfig__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(8923);










const init = async () => {
  (0,src_fclConfig__WEBPACK_IMPORTED_MODULE_8__/* .default */ .Z)("http://localhost:8080", "0xf8d6e0586b0a20c7");
  const autoGeneratedLabels = [...Array(process.env.NEXT_PUBLIC_FLOW_INIT_ACCOUNT)].map((_n, i) => (0,src_accountGenerator__WEBPACK_IMPORTED_MODULE_4__/* .accountLabelGenerator */ .X)(i));
  const initAccountsLabels = [src_constants__WEBPACK_IMPORTED_MODULE_6__/* .SERVICE_ACCOUNT_LABEL */ .Fw, ...autoGeneratedLabels];
  const authorization = await (0,src_authz__WEBPACK_IMPORTED_MODULE_5__/* .authz */ .w)("0xf8d6e0586b0a20c7", "0", "84f82df6790f07b281adb5bbc848bd6298a2de67f94bdfac7a400d5a1b893de5");

  try {
    const txId = await _onflow_fcl__WEBPACK_IMPORTED_MODULE_0__.send([_onflow_fcl__WEBPACK_IMPORTED_MODULE_0__.transaction(cadence_transactions_init_cdc__WEBPACK_IMPORTED_MODULE_3__), _onflow_fcl__WEBPACK_IMPORTED_MODULE_0__.args([_onflow_fcl__WEBPACK_IMPORTED_MODULE_0__.arg(Buffer.from(cadence_contracts_FCL_cdc__WEBPACK_IMPORTED_MODULE_2__, "utf8").toString("hex"), _onflow_types__WEBPACK_IMPORTED_MODULE_1__.String), _onflow_fcl__WEBPACK_IMPORTED_MODULE_0__.arg((0,src_crypto__WEBPACK_IMPORTED_MODULE_7__/* .encodeServiceKey */ .n)("4519e9fbf966c6589fafe60903c0da5f55c5cb50aee5d870f097b35dfb6de13c170718cd92f50811cdd9290e51c2766440b696e0423a5031ae482cca79e3c479"), _onflow_types__WEBPACK_IMPORTED_MODULE_1__.String), _onflow_fcl__WEBPACK_IMPORTED_MODULE_0__.arg(initAccountsLabels, _onflow_types__WEBPACK_IMPORTED_MODULE_1__.Array(_onflow_types__WEBPACK_IMPORTED_MODULE_1__.String))]), _onflow_fcl__WEBPACK_IMPORTED_MODULE_0__.proposer(authorization), _onflow_fcl__WEBPACK_IMPORTED_MODULE_0__.payer(authorization), _onflow_fcl__WEBPACK_IMPORTED_MODULE_0__.authorizations([authorization]), _onflow_fcl__WEBPACK_IMPORTED_MODULE_0__.limit(200)]).then(_onflow_fcl__WEBPACK_IMPORTED_MODULE_0__.decode);
    await _onflow_fcl__WEBPACK_IMPORTED_MODULE_0__.tx(txId).onceSealed();
    _onflow_fcl__WEBPACK_IMPORTED_MODULE_0__.account("0xf8d6e0586b0a20c7").then(d => {
      // eslint-disable-next-line no-console
      console.log("ACCOUNT", Object.keys(d.contracts));
    });
  } catch (error) {
    // eslint-disable-next-line no-console
    console.error("TX:ERROR", error);
  }
};

async function API_Init() {
  await init();
}

/***/ }),

/***/ 6053:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "X": () => (/* binding */ accountLabelGenerator),
/* harmony export */   "Z": () => (/* binding */ accountGenerator)
/* harmony export */ });
/* harmony import */ var namegenerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8877);
/* harmony import */ var namegenerator__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(namegenerator__WEBPACK_IMPORTED_MODULE_0__);

const ALPHABET = ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"];
function accountLabelGenerator(index) {
  const namegenerator = new (namegenerator__WEBPACK_IMPORTED_MODULE_0___default())(ALPHABET);
  return `Account ${namegenerator.nameForId(index)}`;
}
function accountGenerator(index) {
  return {
    type: "ACCOUNT",
    label: accountLabelGenerator(index),
    scopes: []
  };
}

/***/ }),

/***/ 8869:
/***/ ((module) => {

module.exports = "pub contract FCL {\n  pub let storagePath: StoragePath\n\n  pub struct Account {\n    pub let type: String\n    pub let address: Address\n    pub let keyId: Int\n    pub var label: String\n    pub var scopes: [String]\n\n    init(address: Address, label: String, scopes: [String]) {\n      self.type = \"ACCOUNT\"\n      self.address = address\n      self.keyId = 0\n      self.label = label\n      self.scopes = scopes\n    }\n\n    pub fun update(label: String, scopes: [String]) {\n      self.label = label\n      self.scopes = scopes\n    }\n  }\n\n  pub resource Root {\n    pub let key: [UInt8]\n    pub let accounts: {Address: Account}\n\n    init (_ key: String) {\n      self.key = key.decodeHex()\n      self.accounts = {}\n    }\n\n    pub fun add(_ acct: Account) {\n      self.accounts[acct.address] = acct\n    }\n\n    pub fun update(address: Address, label: String, scopes: [String]) {\n      let acct = self.accounts[address]\n      acct!.update(label: label, scopes: scopes)\n      self.accounts[address] = acct\n    }\n  }\n\n  pub fun accounts(): {Address: Account} {\n    return self.account.borrow<&Root>(from: self.storagePath)!.accounts\n  }\n\n  pub fun getServiceKey(): [UInt8] {\n    return self.account.borrow<&Root>(from: self.storagePath)!.key\n  }\n\n  pub fun new(label: String, scopes: [String], address: Address?): AuthAccount {\n    let acct = AuthAccount(payer: self.account)\n    acct.addPublicKey(self.getServiceKey())\n\n    self.account\n      .borrow<&Root>(from: self.storagePath)!\n      .add(Account(address: address ?? acct.address, label: label, scopes: scopes))\n\n    return acct\n  }\n\n  pub fun update(address: Address, label: String, scopes: [String]) {\n    self.account.borrow<&Root>(from: self.storagePath)!\n      .update(address: address, label: label, scopes: scopes)\n  }\n\n  init (key: String, initAccountsLabels: [String]) {\n    self.storagePath = /storage/FCL_DEV_WALLET\n    self.account.save(<- create Root(key), to: self.storagePath)\n\n    self.new(label: initAccountsLabels[0], scopes: [], address: self.account.address)\n    var acctInitIndex = 1\n    while acctInitIndex < initAccountsLabels.length {\n      self.new(label: initAccountsLabels[acctInitIndex], scopes: [], address: nil)\n      acctInitIndex = acctInitIndex + 1\n    }\n  }\n}\n";

/***/ }),

/***/ 2390:
/***/ ((module) => {

module.exports = "transaction(code: String, key: String, initAccountsLabels: [String]) {\n  prepare(acct: AuthAccount) {\n    acct.contracts.add(name: \"FCL\", code: code.decodeHex(), key: key, initAccountsLabels: initAccountsLabels)\n  }\n}\n";

/***/ })

};
;